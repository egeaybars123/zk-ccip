{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_link",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router",
						"type": "address"
					}
				],
				"name": "InvalidRouter",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "SenderNotWhitelisted",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "text",
						"type": "string"
					}
				],
				"name": "MessageReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "destinationChainSelector",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "text",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "feeToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					}
				],
				"name": "MessageSent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "message",
						"type": "tuple"
					}
				],
				"name": "ccipReceive",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "denySender",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_destinationChainSelector",
						"type": "uint64"
					}
				],
				"name": "denylistDestinationChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_sourceChainSelector",
						"type": "uint64"
					}
				],
				"name": "denylistSourceChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLastReceivedMessageDetails",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "X",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "Y",
										"type": "uint256"
									}
								],
								"internalType": "struct Pairing.G1Point",
								"name": "a",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256[2]",
										"name": "X",
										"type": "uint256[2]"
									},
									{
										"internalType": "uint256[2]",
										"name": "Y",
										"type": "uint256[2]"
									}
								],
								"internalType": "struct Pairing.G2Point",
								"name": "b",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "X",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "Y",
										"type": "uint256"
									}
								],
								"internalType": "struct Pairing.G1Point",
								"name": "c",
								"type": "tuple"
							}
						],
						"internalType": "struct IVerification.Proof",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRouter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_destinationChainSelector",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "X",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "Y",
										"type": "uint256"
									}
								],
								"internalType": "struct Pairing.G1Point",
								"name": "a",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256[2]",
										"name": "X",
										"type": "uint256[2]"
									},
									{
										"internalType": "uint256[2]",
										"name": "Y",
										"type": "uint256[2]"
									}
								],
								"internalType": "struct Pairing.G2Point",
								"name": "b",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "X",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "Y",
										"type": "uint256"
									}
								],
								"internalType": "struct Pairing.G1Point",
								"name": "c",
								"type": "tuple"
							}
						],
						"internalType": "struct IVerification.Proof",
						"name": "_proof",
						"type": "tuple"
					}
				],
				"name": "sendMessagePayLINK",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_destinationChainSelector",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "X",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "Y",
										"type": "uint256"
									}
								],
								"internalType": "struct Pairing.G1Point",
								"name": "a",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256[2]",
										"name": "X",
										"type": "uint256[2]"
									},
									{
										"internalType": "uint256[2]",
										"name": "Y",
										"type": "uint256[2]"
									}
								],
								"internalType": "struct Pairing.G2Point",
								"name": "b",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "X",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "Y",
										"type": "uint256"
									}
								],
								"internalType": "struct Pairing.G1Point",
								"name": "c",
								"type": "tuple"
							}
						],
						"internalType": "struct IVerification.Proof",
						"name": "_proof",
						"type": "tuple"
					}
				],
				"name": "sendMessagePayNative",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_destinationChainSelector",
						"type": "uint64"
					}
				],
				"name": "whitelistDestinationChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "whitelistSender",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_sourceChainSelector",
						"type": "uint64"
					}
				],
				"name": "whitelistSourceChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "whitelistedDestinationChains",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "whitelistedSenders",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "whitelistedSourceChains",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "withdrawToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Note ensure you check the msg.sender is the OffRampRouter",
					"params": {
						"message": "CCIP Message"
					}
				},
				"constructor": {
					"params": {
						"_link": "The address of the link contract.",
						"_router": "The address of the router contract."
					}
				},
				"denySender(address)": {
					"details": "Denylists a sender.",
					"params": {
						"_sender": "The address of the sender."
					}
				},
				"denylistDestinationChain(uint64)": {
					"details": "Denylists a chain for transactions.",
					"params": {
						"_destinationChainSelector": "The selector of the destination chain to be denylisted."
					}
				},
				"denylistSourceChain(uint64)": {
					"details": "Denylists a chain for transactions.",
					"params": {
						"_sourceChainSelector": "The selector of the source chain to be denylisted."
					}
				},
				"getLastReceivedMessageDetails()": {
					"returns": {
						"_1": "text The last received text.",
						"messageId": "The ID of the last received message."
					}
				},
				"getRouter()": {
					"returns": {
						"_0": "i_router address"
					}
				},
				"sendMessagePayLINK(uint64,address,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))": {
					"details": "Assumes your contract has sufficient LINK.",
					"params": {
						"_destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
						"_proof": "The text to be sent.",
						"_receiver": "The address of the recipient on the destination blockchain."
					},
					"returns": {
						"messageId": "The ID of the CCIP message that was sent."
					}
				},
				"sendMessagePayNative(uint64,address,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))": {
					"details": "Assumes your contract has sufficient native gas tokens.",
					"params": {
						"_destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
						"_proof": "The text to be sent.",
						"_receiver": "The address of the recipient on the destination blockchain."
					},
					"returns": {
						"messageId": "The ID of the CCIP message that was sent."
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"interfaceId": "The interfaceId to check"
					},
					"returns": {
						"_0": "true if the interfaceId is supported"
					}
				},
				"whitelistDestinationChain(uint64)": {
					"details": "Whitelists a chain for transactions.",
					"params": {
						"_destinationChainSelector": "The selector of the destination chain to be whitelisted."
					}
				},
				"whitelistSender(address)": {
					"details": "Whitelists a sender.",
					"params": {
						"_sender": "The address of the sender."
					}
				},
				"whitelistSourceChain(uint64)": {
					"details": "Whitelists a chain for transactions.",
					"params": {
						"_sourceChainSelector": "The selector of the source chain to be whitelisted."
					}
				},
				"withdraw(address)": {
					"details": "This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.",
					"params": {
						"_beneficiary": "The address to which the Ether should be sent."
					}
				},
				"withdrawToken(address,address)": {
					"details": "This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.",
					"params": {
						"_beneficiary": "The address to which the tokens will be sent.",
						"_token": "The contract address of the ERC20 token to be withdrawn."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
				},
				"constructor": {
					"notice": "Constructor initializes the contract with the router address."
				},
				"denySender(address)": {
					"notice": "This function can only be called by the owner."
				},
				"denylistDestinationChain(uint64)": {
					"notice": "This function can only be called by the owner."
				},
				"denylistSourceChain(uint64)": {
					"notice": "This function can only be called by the owner."
				},
				"getLastReceivedMessageDetails()": {
					"notice": "Fetches the details of the last received message."
				},
				"getRouter()": {
					"notice": "Return the current router"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"sendMessagePayLINK(uint64,address,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))": {
					"notice": "Sends data to receiver on the destination chain.Pay for fees in LINK."
				},
				"sendMessagePayNative(uint64,address,((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))": {
					"notice": "Sends data to receiver on the destination chain.Pay for fees in native gas."
				},
				"supportsInterface(bytes4)": {
					"notice": "IERC165 supports an interfaceId"
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"whitelistDestinationChain(uint64)": {
					"notice": "This function can only be called by the owner."
				},
				"whitelistSender(address)": {
					"notice": "This function can only be called by the owner."
				},
				"whitelistSourceChain(uint64)": {
					"notice": "This function can only be called by the owner."
				},
				"withdraw(address)": {
					"notice": "Allows the contract owner to withdraw the entire balance of Ether from the contract."
				},
				"withdrawToken(address,address)": {
					"notice": "Allows the owner of the contract to withdraw all tokens of a specific ERC20 token."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ProofReceiver.sol": "Messenger"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwner.sol": {
			"keccak256": "0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72",
			"license": "MIT",
			"urls": [
				"bzz-raw://af0371c1af45db651823b9a3d5af761b08243c78f105166342eee28de356c8dd",
				"dweb:/ipfs/QmPnC9qNDKwJFd5unwLb9pxjrutoe8MWjm5EXHTxq2kJ4x"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654",
			"license": "MIT",
			"urls": [
				"bzz-raw://a73f185d79d82e6d9baa531d55ffb88c80def1f6187dff93d3df6b2cb5ab7187",
				"dweb:/ipfs/QmVZEePJvcN1KxSTaD5rhKhaMBWHqs6ZeZ5s17Ft6mR5hJ"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
			"keccak256": "0xcf5d0a5cd6ed0f6a9ed721b3e532c0504ed1ba3ab6d3567165876ceb4f23b084",
			"license": "MIT",
			"urls": [
				"bzz-raw://5f3b616ed867effae4f3dcf0ebd35cf8af547c1a399cc26507db1bae6c5af66c",
				"dweb:/ipfs/QmWugZNWcRZeLUxdRcJjktrhFfErKBBtuzDwYMhaLWS3p7"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
			"keccak256": "0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3bb4ca50612b0150a29b9ea7c82f6228914ff54716584541bad5c0259e8fa33",
				"dweb:/ipfs/QmTnqhNtBD9bUmqVaR4YHkWrBUdSGHV3DXAgrTM193PGkH"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol": {
			"keccak256": "0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286",
			"license": "MIT",
			"urls": [
				"bzz-raw://00fbdb19d1dc68983c972644b68bff9f2a277d088841444675b3448dc01edbb7",
				"dweb:/ipfs/Qma2PN1vYgDrou5ZN72NfvN5YbdHyxWyeBqM67AuRnvDRs"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
			"keccak256": "0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523",
			"license": "MIT",
			"urls": [
				"bzz-raw://fcdf688dc96619a256fdbddce1a6ceff0f6c57963be267148abdcfd57616725e",
				"dweb:/ipfs/QmVEF1ZER2V86L8CcMYTqt1VwQ4Xw2pa12pNZbb99UkqRT"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/interfaces/OwnableInterface.sol": {
			"keccak256": "0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086",
			"license": "MIT",
			"urls": [
				"bzz-raw://acf7ed6aff47fbddeff1b85e1225a717dfa8bfb3ab89db0e6564346afcf03693",
				"dweb:/ipfs/QmQQn5sKn1ARbt1WhYoHwfTJhK8fbQi8MbDQeHxGXTPbPE"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol": {
			"keccak256": "0x010d0a67d81c4020004f72d95e8a7b08b98178de026e96565f315806e7525ada",
			"license": "MIT",
			"urls": [
				"bzz-raw://8420832be0b0ef7823f8b1bd4cd6cc2028412ff5c53049a12c133b3c44f351fd",
				"dweb:/ipfs/QmdehywxLNrSnNAfrfUqoQr1jPrGX2sBnCQ2wdZAZLx5eB"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol": {
			"keccak256": "0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a",
			"license": "MIT",
			"urls": [
				"bzz-raw://2b5afd167693d0e80d30d0f50b718b5df237c97d721383b97154049cabab1128",
				"dweb:/ipfs/QmZpVB96pJpaJmmnqB1RC3qSZk8upgLL22YZtq97JzpK5H"
			]
		},
		"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol": {
			"keccak256": "0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5",
			"license": "MIT",
			"urls": [
				"bzz-raw://e49bdba6c6013040eb546db3bbceca7d2c8ac86a2c15ff2c85eacd0ed8541271",
				"dweb:/ipfs/QmYa5en1yth7SdJfq9M7mcwDJJvy3996PSEjiwzgH1HvJW"
			]
		},
		"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol": {
			"keccak256": "0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51",
			"license": "MIT",
			"urls": [
				"bzz-raw://301fa881df623882941bdc7a807807df436c5c7da499fa1a4bbe490738109845",
				"dweb:/ipfs/QmV2W4NYpe6uk4s34sCyrFJHfPEjYAkvHUposWkXrRNtbj"
			]
		},
		"contracts/ProofReceiver.sol": {
			"keccak256": "0x3cd0cfe435774104d04887e7140d9fa57f6d18245d9b8ad96ef903a13cfe592b",
			"license": "MIT",
			"urls": [
				"bzz-raw://173d491ba197acfee6d453f1264c13ed3de54c327d4bd1b6f261b559b35deb22",
				"dweb:/ipfs/QmQgUCUu9e48YkdnCuEgvYj4QWJtk3GVGu3vHR5zHA4u2T"
			]
		}
	},
	"version": 1
}